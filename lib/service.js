// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, Service, _, _getFields, _getManual, _httpPost, fs, glob, marked, path, request, requestAsync, util;

  path = require('path');

  fs = require('fs');

  Promise = require('bluebird');

  _ = require('lodash');

  glob = require('glob');

  request = require('request');

  marked = require('marked');

  util = require('./util');

  requestAsync = Promise.promisify(request);

  _getManual = function() {
    var _getContent, fileNames, name, self;
    if (this._manual != null) {
      return this._manual;
    }
    self = this;
    name = this.name;
    fileNames = glob.sync(__dirname + "/../manuals/" + name + "*.md");
    _getContent = function(fileName) {
      var baseName, content, lang;
      baseName = path.basename(fileName);
      lang = baseName.slice(name.length + 1, -3);
      content = fs.readFileSync(fileName, {
        encoding: 'UTF-8'
      });
      content = content.replace(/\((.*?images.*?)\)/ig, function(m, uri) {
        return '(' + util["static"](uri + ')');
      });
      return [lang, marked(content)];
    };
    if (fileNames.length === 0) {
      return this._manual = false;
    } else if (fileNames.length === 1) {
      return this._manual = _getContent(fileNames[0])[1];
    } else {
      return this._manual = _.zipObject(fileNames.map(_getContent));
    }
  };

  _getFields = function() {
    return [].concat(this.headerFields, this._fields, this.footerFields);
  };

  _httpPost = function(url, payload) {
    return requestAsync({
      method: 'POST',
      url: url,
      headers: {
        'User-Agent': util.getUserAgent()
      },
      json: true,
      timeout: 5000,
      body: payload
    }).then(function(res) {
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        throw new Error("Bad request " + res.statusCode);
      }
      return res.body;
    });
  };

  Service = (function() {
    Service.prototype.title = '';

    Service.prototype.summary = '';

    Service.prototype.description = '';

    Service.prototype.iconUrl = '';

    Service.prototype.template = '';

    Service.prototype.isHidden = false;

    Service.prototype.isCustomized = false;

    Service.prototype.showRobot = false;

    function Service(name1) {
      this.name = name1;
    }

    Service.prototype.register = function() {
      this.title = this.name;
      this._fields = [];
      this._apis = {};
      this._events = {};
      this.headerFields = [
        {
          key: '_roomId',
          type: 'selector'
        }
      ];
      this.footerFields = [
        {
          key: 'title',
          type: 'text'
        }, {
          key: 'description',
          type: 'text'
        }, {
          key: 'iconUrl',
          type: 'file'
        }
      ];
      Object.defineProperty(this, 'fields', {
        get: _getFields,
        set: function(_fields) {
          this._fields = _fields;
          return this._fields;
        }
      });
      return Object.defineProperty(this, 'manual', {
        get: _getManual
      });
    };

    Service.prototype.registerApi = function(name, fn) {
      return this._apis[name] = fn;
    };

    Service.prototype.registerEvents = function(events) {
      var self;
      self = this;
      if (toString.call(events) === '[object Array]') {
        return events.forEach(function(event) {
          return self.registerEvent(event);
        });
      } else if (toString.call(events) === '[object Object]') {
        return Object.keys(events).forEach(function(event) {
          var handler;
          handler = events[event];
          return self.registerEvent(event, handler);
        });
      } else {
        throw new Error('Events are invalid');
      }
    };


    /**
     * Get url of apis from services, group by service name
     * @param  {String} apiName - Api name
     * @return {String} url - The complete api url
     */

    Service.prototype.getApiUrl = function(apiName) {
      return util.getApiUrl(this.name, apiName);
    };

    Service.prototype.receiveApi = function(name, req, res) {
      var self;
      self = this;
      return Promise.resolve().then(function() {
        if (toString.call(self._apis[name]) !== '[object Function]') {
          throw new Error('Api function is not defined');
        }
        return self._apis[name].call(self, req, res);
      });
    };

    Service.prototype.registerEvent = function(event, handler) {
      var self;
      self = this;
      if (toString.call(handler) !== '[object Function]') {
        throw new Error('Event handler is undefined');
      }
      return this._events[event] = handler;
    };

    Service.prototype.receiveEvent = function(event, req, res) {
      var self;
      if (toString.call(this._events[event]) !== '[object Function]') {
        return Promise.resolve();
      }
      self = this;
      return Promise.resolve().then(function() {
        return self._events[event].call(self, req, res);
      });
    };

    Service.prototype.toJSON = function() {
      return {
        name: this.name,
        template: this.template,
        title: this.title,
        summary: this.summary,
        description: this.description,
        iconUrl: this.iconUrl,
        fields: this.fields,
        manual: this.manual,
        isCustomized: this.isCustomized,
        showRobot: this.showRobot
      };
    };

    Service.prototype.toObject = Service.prototype.toJSON;


    /**
     * Send message to talk users
     * @param  {Object}   message
     * @return {Promise}  MessageModel
     */

    Service.prototype.sendMessage = function(message) {};


    /**
     * Post data to the thrid part services
     * @param  {String}   URL
     * @param  {Object}   Payload
     * @param  {Object}   Options
     * @return {Promise}  Response body
     */

    Service.prototype.httpPost = function(url, payload, options) {
      var _tryPost, interval, retryTimes, tryTimes;
      if (options == null) {
        options = {};
      }
      tryTimes = 0;
      retryTimes = options.retryTimes || 0;
      interval = options.interval || 1000;
      if (retryTimes < 1) {
        return _httpPost(url, payload);
      }
      _tryPost = function() {
        return _httpPost(url, payload)["catch"](function(err) {
          tryTimes += 1;
          if (tryTimes > retryTimes) {
            throw err;
          }
          return Promise.delay(interval).then(function() {
            interval *= 3;
            return _tryPost();
          });
        });
      };
      return _tryPost();
    };

    return Service;

  })();

  module.exports = Service;

}).call(this);
