// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, _receiveWebhook, marked, util;

  Promise = require('bluebird');

  marked = require('marked');

  util = require('../util');


  /**
   * Define handler when receive incoming webhook from csdn
   * @param  {Object}   req      Express request object
   * @param  {Object}   res      Express response object
   * @param  {Function} callback
   * @return {Promise}
   */

  _receiveWebhook = function(arg) {
    var attachment, author, authorName, body, commitArr, message, payload, projectName, projectUrl, ref, ref1, ref2, ref3, ref4, ref5, ref6, text;
    body = arg.body;
    payload = body || null;
    if (!payload) {
      return;
    }
    message = {};
    attachment = {
      category: 'quote',
      data: {}
    };
    projectName = ((ref = payload.repository) != null ? ref.name : void 0) ? "[" + payload.repository.name + "] " : '';
    projectUrl = (ref1 = payload.repository) != null ? ref1.homepage : void 0;
    author = (ref2 = payload.commits[0]) != null ? (ref3 = ref2.author) != null ? ref3.name : void 0 : void 0;
    authorName = author ? author + " " : '';
    if (((ref4 = payload.before) != null ? ref4.slice(0, 6) : void 0) === '000000') {
      attachment.data.title = projectName + "新建了分支 " + payload.ref;
    } else if (((ref5 = payload.after) != null ? ref5.slice(0, 6) : void 0) === '000000') {
      attachment.data.title = projectName + "删除了分支 " + payload.ref;
    } else {
      attachment.data.title = projectName + "提交了新的代码";
      if ((ref6 = payload.commits) != null ? ref6.length : void 0) {
        commitArr = payload.commits.map(function(commit) {
          var commitUrl;
          commitUrl = commit.url;
          return "<a href=\"" + commitUrl + "\" target=\"_blank\"><code>" + commit.id.slice(0, 6) + ":</code></a> " + commit.message + "<br>";
        });
        text = commitArr.join('');
        attachment.data.text = text;
      }
    }
    attachment.data.redirectUrl = projectUrl;
    message.attachments = [attachment];
    return message;
  };

  module.exports = function() {
    this.title = 'csdn';
    this.template = 'webhook';
    this.summary = util.i18n({
      zh: '全球最大中文IT社区',
      en: "The world's largest Chinese IT community"
    });
    this.description = util.i18n({
      zh: 'CSDN 是中国最大的IT社区和服务平台，为中国的软件开发者和IT从业者提供知识传播、职业发展、软件开发等全生命周期服务',
      en: "CSDN is China's largest IT community and service platform to provide knowledge dissemination for the Chinese software developers and IT practitioners, professional development , software development lifecycle services."
    });
    this.iconUrl = util["static"]('images/icons/csdn@2x.png');
    this._fields.push({
      key: 'webhookUrl',
      type: 'text',
      readOnly: true,
      description: util.i18n({
        zh: '复制 web hook 地址到你的 csdn 当中使用。',
        en: 'Copy this web hook to your csdn server to use it.'
      })
    });
    return this.registerEvent('service.webhook', _receiveWebhook);
  };

}).call(this);
