// Generated by CoffeeScript 1.10.0
(function() {
  var Err, Promise, _, _apiHost, _apiKey, _beforeCreate, _beforeRemove, _beforeUpdate, _createWebhook, _getBoards, _getTrelloToken, _onWebhook, _removeWebhook, _webHost, logger, ref, ref1, request, requestAsync, util;

  Promise = require('bluebird');

  request = require('request');

  Err = require('err1st');

  _ = require('lodash');

  logger = require('graceful-logger');

  requestAsync = Promise.promisify(request);

  util = require('../util');

  _webHost = 'https://trello.com';

  _apiHost = ((ref = util.config.trello) != null ? ref.apiHost : void 0) || 'https://api.trello.com/1';

  _apiKey = (ref1 = util.config.trello) != null ? ref1.apiKey : void 0;

  _getTrelloToken = function(accountToken) {
    var $token;
    if (!accountToken) {
      return Promise.reject(new Err('PARAMS_MISSING', 'accountToken'));
    }
    return $token = util.getAccountUserAsync(accountToken).then(function(user) {
      var accessToken, ref2;
      accessToken = null;
      if (user != null) {
        if ((ref2 = user.unions) != null) {
          ref2.some(function(union) {
            if ((union != null ? union.refer : void 0) === 'trello' && union.accessToken) {
              accessToken = union.accessToken;
              return true;
            }
          });
        }
      }
      if (!accessToken) {
        throw new Err('NO_PERMISSION', '你没有绑定 Trello 账号');
      }
      return accessToken;
    });
  };

  _getBoards = function(req, res) {
    var $token;
    $token = _getTrelloToken(req.get('accountToken'));
    return $token.then(function(token) {
      var options;
      options = {
        method: 'GET',
        headers: {
          "User-Agent": util.getUserAgent()
        },
        url: _apiHost + '/members/me/boards',
        json: true,
        timeout: 30000,
        qs: {
          key: _apiKey,
          token: token
        }
      };
      return requestAsync(options).then(function(res) {
        var base, boards;
        if (!(res.statusCode >= 200 && res.statusCode < 300)) {
          throw new Err("BAD_REQUEST", res.statusCode);
        }
        return boards = typeof (base = res.body).map === "function" ? base.map(function(board) {
          return {
            modelId: board.id,
            modelName: board.name
          };
        }) : void 0;
      });
    });
  };

  _createWebhook = function(integration, token) {
    var options, ref2;
    if (!(integration != null ? (ref2 = integration.config) != null ? ref2.modelId : void 0 : void 0)) {
      return Promise.reject(new Err('FIELD_MISSING', 'integration.config.modelId'));
    }
    options = {
      method: 'POST',
      headers: {
        "User-Agent": util.getUserAgent()
      },
      url: _apiHost + '/webhooks',
      json: true,
      timeout: 30000,
      qs: {
        key: _apiKey,
        token: token
      },
      body: {
        idModel: integration.config.modelId,
        description: integration.description || '简聊 x Trello',
        callbackURL: integration.webhookUrl
      }
    };
    return requestAsync(options).then(function(res) {
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        throw new Err("BAD_REQUEST", res.statusCode);
      }
      return integration.data = {
        webhookId: res.body.id
      };
    });
  };

  _removeWebhook = function(integration, token) {
    var options, ref2;
    if (!(integration != null ? (ref2 = integration.data) != null ? ref2.webhookId : void 0 : void 0)) {
      return Promise.reject(new Err('FIELD_MISSING', 'integration.data.webhookId'));
    }
    options = {
      method: 'DELETE',
      headers: {
        'User-Agent': util.getUserAgent()
      },
      url: _apiHost + ("/webhooks/" + integration.data.webhookId),
      json: true,
      timeout: 30000,
      qs: {
        key: _apiKey,
        token: token
      }
    };
    return requestAsync(options).then(function(res) {
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        throw new Err("BAD_REQUEST", res.statusCode);
      }
      integration.config = {};
      return integration.data = {};
    });
  };

  _beforeCreate = function(req) {
    var $token, integration;
    integration = req.integration;
    $token = _getTrelloToken(req.get('accountToken'));
    return $token.then(function(token) {
      return _createWebhook(integration, token);
    }).then(function() {
      return integration;
    });
  };

  _beforeUpdate = function(req) {
    var $token, integration, ref2, ref3, ref4;
    integration = req.integration;
    if (!(((ref2 = req.get('config')) != null ? ref2.modelId : void 0) && ((ref3 = req.get('config')) != null ? ref3.modelId : void 0) !== ((ref4 = integration.config) != null ? ref4.modelId : void 0))) {
      return;
    }
    $token = _getTrelloToken(req.get('accountToken'));
    return $token.then(function(token) {
      return _removeWebhook(integration, token);
    }).then(function() {
      if (req.get('config')) {
        integration.config = req.get('config');
      }
      return _createWebhook(integration);
    }).then(function() {
      return integration;
    });
  };

  _beforeRemove = function(req) {
    var $token, integration;
    integration = req.integration;
    $token = _getTrelloToken(req.get('accountToken'));
    return $token.then(function(token) {
      return _removeWebhook(integration, token);
    }).then(function() {
      return integration;
    })["catch"](function(err) {
      return logger.warn(err.stack);
    });
  };

  _onWebhook = function(req) {
    var action, attachment, message, ref10, ref100, ref101, ref102, ref103, ref104, ref105, ref106, ref107, ref108, ref109, ref11, ref110, ref111, ref112, ref113, ref114, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref33, ref34, ref35, ref36, ref37, ref38, ref39, ref4, ref40, ref41, ref42, ref43, ref44, ref45, ref46, ref47, ref48, ref49, ref5, ref50, ref51, ref52, ref53, ref54, ref55, ref56, ref57, ref58, ref59, ref6, ref60, ref61, ref62, ref63, ref64, ref65, ref66, ref67, ref68, ref69, ref7, ref70, ref71, ref72, ref73, ref74, ref75, ref76, ref77, ref78, ref79, ref8, ref80, ref81, ref82, ref83, ref84, ref85, ref86, ref87, ref88, ref89, ref9, ref90, ref91, ref92, ref93, ref94, ref95, ref96, ref97, ref98, ref99;
    if (req.method === 'HEAD') {
      return;
    }
    if (!((ref2 = req.body) != null ? (ref3 = ref2.action) != null ? ref3.type : void 0 : void 0)) {
      throw new Err('PARAMS_MISSING', 'action.type');
    }
    action = req.body.action;
    message = {};
    attachment = {
      category: 'quote',
      data: {}
    };
    switch (false) {
      case action.type !== 'addAttachmentToCard':
        attachment.data.title = ((ref4 = action.memberCreator) != null ? ref4.fullName : void 0) + " attached " + ((ref5 = action.data) != null ? (ref6 = ref5.attachment) != null ? ref6.name : void 0 : void 0) + " to " + ((ref7 = action.data) != null ? (ref8 = ref7.card) != null ? ref8.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref9 = action.data) != null ? (ref10 = ref9.card) != null ? ref10.shortLink : void 0 : void 0);
        attachment.data.imageUrl = (ref11 = action.data) != null ? (ref12 = ref11.attachment) != null ? ref12.previewUrl2x : void 0 : void 0;
        break;
      case action.type !== 'addChecklistToCard':
        attachment.data.title = ((ref13 = action.memberCreator) != null ? ref13.fullName : void 0) + " added checklist to " + ((ref14 = action.data) != null ? (ref15 = ref14.card) != null ? ref15.name : void 0 : void 0);
        attachment.data.text = (ref16 = action.data) != null ? (ref17 = ref16.checklist) != null ? ref17.name : void 0 : void 0;
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref18 = action.data) != null ? (ref19 = ref18.card) != null ? ref19.shortLink : void 0 : void 0);
        break;
      case action.type !== 'commentCard':
        attachment.data.title = ((ref20 = action.memberCreator) != null ? ref20.fullName : void 0) + " comment on " + ((ref21 = action.data) != null ? (ref22 = ref21.card) != null ? ref22.name : void 0 : void 0);
        attachment.data.text = (ref23 = action.data) != null ? ref23.text : void 0;
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref24 = action.data) != null ? (ref25 = ref24.card) != null ? ref25.shortLink : void 0 : void 0);
        break;
      case action.type !== 'createCard':
        attachment.data.title = ((ref26 = action.memberCreator) != null ? ref26.fullName : void 0) + " created " + ((ref27 = action.data) != null ? (ref28 = ref27.card) != null ? ref28.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref29 = action.data) != null ? (ref30 = ref29.card) != null ? ref30.shortLink : void 0 : void 0);
        break;
      case action.type !== 'createCheckItem':
        attachment.data.title = ((ref31 = action.memberCreator) != null ? ref31.fullName : void 0) + " added new check item to " + ((ref32 = action.data) != null ? (ref33 = ref32.card) != null ? ref33.name : void 0 : void 0);
        attachment.data.text = (ref34 = action.data) != null ? (ref35 = ref34.checkItem) != null ? ref35.name : void 0 : void 0;
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref36 = action.data) != null ? (ref37 = ref36.card) != null ? ref37.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateBoard' && _.has((ref38 = action.data) != null ? ref38.old : void 0, 'closed')):
        attachment.data.title = ((ref39 = action.memberCreator) != null ? ref39.fullName : void 0) + " " + (((ref40 = action.data) != null ? (ref41 = ref40.old) != null ? ref41.closed : void 0 : void 0) ? 'reopened' : 'closed') + " board " + ((ref42 = action.data) != null ? (ref43 = ref42.board) != null ? ref43.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/b/" + ((ref44 = action.data) != null ? (ref45 = ref44.board) != null ? ref45.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateBoard' && _.has((ref46 = action.data) != null ? ref46.old : void 0, 'name')):
        attachment.data.title = ((ref47 = action.memberCreator) != null ? ref47.fullName : void 0) + " renamed board " + ((ref48 = action.data) != null ? (ref49 = ref48.board) != null ? ref49.name : void 0 : void 0) + " from " + action.data.old.name;
        attachment.data.redirectUrl = _webHost + "/b/" + ((ref50 = action.data) != null ? (ref51 = ref50.board) != null ? ref51.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateCard' && _.has((ref52 = action.data) != null ? ref52.old : void 0, 'closed')):
        attachment.data.title = ((ref53 = action.memberCreator) != null ? ref53.fullName : void 0) + " " + (((ref54 = action.data) != null ? (ref55 = ref54.old) != null ? ref55.closed : void 0 : void 0) ? 'reopened' : 'closed') + " card " + ((ref56 = action.data) != null ? (ref57 = ref56.card) != null ? ref57.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref58 = action.data) != null ? (ref59 = ref58.card) != null ? ref59.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateCard' && _.has((ref60 = action.data) != null ? ref60.old : void 0, 'due')):
        attachment.data.title = ((ref61 = action.memberCreator) != null ? ref61.fullName : void 0) + " set " + ((ref62 = action.data) != null ? (ref63 = ref62.card) != null ? ref63.name : void 0 : void 0) + " to be due 2016-03-09T04:00:00.000Z";
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref64 = action.data) != null ? (ref65 = ref64.card) != null ? ref65.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateCard' && _.has((ref66 = action.data) != null ? ref66.old : void 0, 'idList')):
        attachment.data.title = ((ref67 = action.memberCreator) != null ? ref67.fullName : void 0) + " moved " + ((ref68 = action.data) != null ? (ref69 = ref68.card) != null ? ref69.name : void 0 : void 0) + " from " + ((ref70 = action.data) != null ? (ref71 = ref70.listBefore) != null ? ref71.name : void 0 : void 0) + " to " + ((ref72 = action.data) != null ? (ref73 = ref72.listAfter) != null ? ref73.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref74 = action.data) != null ? (ref75 = ref74.card) != null ? ref75.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateCard' && _.has((ref76 = action.data) != null ? ref76.old : void 0, 'name')):
        attachment.data.title = ((ref77 = action.memberCreator) != null ? ref77.fullName : void 0) + " renamed " + ((ref78 = action.data) != null ? (ref79 = ref78.card) != null ? ref79.name : void 0 : void 0) + " from " + ((ref80 = action.data) != null ? (ref81 = ref80.old) != null ? ref81.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref82 = action.data) != null ? (ref83 = ref82.card) != null ? ref83.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateCheckItem' && _.has((ref84 = action.data) != null ? ref84.old : void 0, 'name')):
        attachment.data.title = ((ref85 = action.memberCreator) != null ? ref85.fullName : void 0) + " renamed " + ((ref86 = action.data) != null ? (ref87 = ref86.checkItem) != null ? ref87.name : void 0 : void 0) + " from " + ((ref88 = action.data) != null ? (ref89 = ref88.old) != null ? ref89.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref90 = action.data) != null ? (ref91 = ref90.card) != null ? ref91.shortLink : void 0 : void 0);
        break;
      case action.type !== 'updateCheckItemStateOnCard':
        attachment.data.title = ((ref92 = action.memberCreator) != null ? ref92.fullName : void 0) + " " + ((ref93 = action.data) != null ? (ref94 = ref93.checkItem) != null ? ref94.state : void 0 : void 0) + " " + ((ref95 = action.data) != null ? (ref96 = ref95.checkItem) != null ? ref96.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref97 = action.data) != null ? (ref98 = ref97.card) != null ? ref98.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateChecklist' && _.has((ref99 = action.data) != null ? ref99.old : void 0, 'name')):
        attachment.data.title = ((ref100 = action.memberCreator) != null ? ref100.fullName : void 0) + " renamed " + ((ref101 = action.data) != null ? (ref102 = ref101.checklist) != null ? ref102.name : void 0 : void 0) + " from " + ((ref103 = action.data) != null ? (ref104 = ref103.old) != null ? ref104.name : void 0 : void 0);
        attachment.data.redirectUrl = _webHost + "/b/" + ((ref105 = action.data) != null ? (ref106 = ref105.board) != null ? ref106.shortLink : void 0 : void 0);
        break;
      case !(action.type === 'updateComment' && _.has((ref107 = action.data) != null ? ref107.old : void 0, 'text')):
        attachment.data.title = ((ref108 = action.memberCreator) != null ? ref108.fullName : void 0) + " updated comment on " + ((ref109 = action.data) != null ? (ref110 = ref109.card) != null ? ref110.name : void 0 : void 0);
        attachment.data.text = (ref111 = action.data) != null ? (ref112 = ref111.action) != null ? ref112.text : void 0 : void 0;
        attachment.data.redirectUrl = _webHost + "/c/" + ((ref113 = action.data) != null ? (ref114 = ref113.card) != null ? ref114.shortLink : void 0 : void 0);
    }
    message.attachments = [attachment];
    return message;
  };

  module.exports = function() {
    this.title = 'Trello';
    this.summary = util.i18n({
      zh: '实时接收来自 Trello 看板中的动态消息',
      en: 'This integration helps you receive real-time tasks, schedules and comments from Trello'
    });
    this.description = util.i18n({
      zh: '实时接收来自 Trello 看板中的动态消息',
      en: 'This integration helps you receive real-time tasks, schedules and comments from Trello'
    });
    this.iconUrl = util["static"]('images/icons/trello@2x.png');
    this._fields.push({
      key: 'config',
      onLoad: {
        get: this.getApiUrl('getBoards')
      }
    });
    this.registerEvent('service.webhook', _onWebhook);
    this.registerEvent('before.integration.create', _beforeCreate);
    this.registerEvent('before.integration.update', _beforeUpdate);
    this.registerEvent('before.integration.remove', _beforeRemove);
    return this.registerApi('getBoards', _getBoards);
  };

}).call(this);
