// Generated by CoffeeScript 1.10.0
(function() {
  var _receiveWebhook, util;

  util = require('../util');

  _receiveWebhook = function(arg) {
    var action, attachment, body, error, headers, message, ref, type;
    body = arg.body, headers = arg.headers;
    try {
      ref = headers['x-event-key'].split(":"), type = ref[0], action = ref[1];
    } catch (error) {
      throw new Error('Invalid event format');
    }
    if (type !== 'repo' && type !== 'issue' && type !== 'pullrequest') {
      throw new Error('Invalid event type');
    }
    message = {};
    attachment = {
      category: 'quote',
      data: {}
    };
    switch (type) {
      case 'repo':
        if (action !== 'push' && action !== 'commit_comment_created') {
          throw new Error('Unsupported action');
        }
        if (action === 'push') {
          attachment.data.title = "A new push for project " + body.repository.name;
          attachment.data.text = "Committer: " + body.actor.display_name;
          attachment.data.redirectUrl = body.repository.links.html.href;
        } else if (action === 'commit_comment_created') {
          attachment.data.title = "A new comment for " + body.repository.name;
          attachment.data.text = body.comment.content.raw;
          attachment.data.redirectUrl = body.comment.links.html.href;
        }
        break;
      case 'issue':
        if (action !== 'created' && action !== 'updated' && action !== 'comment_created') {
          throw new Error('Unsupported action');
        }
        if (action === 'created') {
          attachment.data.title = body.actor.display_name + " created an issue for project " + body.repository.full_name;
          attachment.data.text = body.issue.content.raw;
          attachment.data.redirectUrl = body.issue.links.html.href;
        } else if (action === 'updated') {
          attachment.data.title = body.actor.display_name + " updated an issue for project " + body.repository.full_name;
          attachment.data.text = body.changes.content["new"];
          attachment.data.redirectUrl = body.issue.links.html.href;
        } else if (action === 'comment_created') {
          attachment.data.title = body.actor.display_name + " created a comment for project " + body.repository.full_name;
          attachment.data.text = body.comment.content.raw;
          attachment.data.redirectUrl = body.comment.links.html.href;
        }
        break;
      case 'pullrequest':
        if (action !== 'created' && action !== 'updated' && action !== 'comment_created' && action !== 'comment_deleted' && action !== 'fulfilled' && action !== 'rejected') {
          throw new Error('Unsupported action');
        }
        if (action === 'created') {
          attachment.data.title = body.actor.display_name + " created a pull request for " + body.repository.name;
          attachment.data.text = body.pullrequest.title;
          attachment.data.redirectUrl = body.pullrequest.links.html.href;
        } else if (action === 'updated') {
          attachment.data.title = body.actor.display_name + " updated a pull request for " + body.repository.name;
          attachment.data.text = body.pullrequest.title;
          attachment.data.redirectUrl = body.pullrequest.links.html.href;
        } else if (action === 'comment_created') {
          attachment.data.title = body.actor.display_name + " created a comment for pull request " + body.pullrequest.title;
          attachment.data.text = body.comment.pullrequest.title;
          attachment.data.redirectUrl = body.pullrequest.links.html.href;
        } else if (action === 'comment_deleted') {
          attachment.data.title = body.actor.display_name + " deleted a comment for pull request " + body.pullrequest.title;
          attachment.data.text = body.comment.pullrequest.title;
          attachment.data.redirectUrl = body.pullrequest.links.html.href;
        } else if (action === 'fulfilled') {
          attachment.data.title = body.actor.display_name + " fulfilled the pull request " + body.pullrequest.title;
          attachment.data.text = "";
          attachment.data.redirectUrl = body.pullrequest.links.html.href;
        } else if (action === 'rejected') {
          attachment.data.title = body.actor.display_name + " rejected the pull request " + body.pullrequest.title;
          attachment.data.text = "";
          attachment.data.redirectUrl = body.pullrequest.links.html.href;
        }
    }
    message.attachments = [attachment];
    return message;
  };

  module.exports = function() {
    this.title = 'Bitbucket';
    this.template = 'webhook';
    this.summary = util.i18n({
      zh: '免费的代码托管服务',
      en: 'Free code management service.'
    });
    this.description = util.i18n({
      zh: 'BitBucket 是一家采用Mercurial和Git作为分布式版本控制系统源代码托管云服务',
      en: 'Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud.'
    });
    this.iconUrl = util["static"]('images/icons/bitbucket@2x.png');
    this._fields.push({
      key: 'webhookUrl',
      type: 'text',
      readonly: true,
      description: util.i18n({
        zh: '复制 webhook 地址到 bitbucket.org 中使用',
        en: 'Copy this webhook to your bitbucket.org to use it.'
      })
    });
    return this.registerEvent('service.webhook', _receiveWebhook);
  };

}).call(this);
