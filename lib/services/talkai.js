// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, _, _getTuringCallback, _sendToRobot, qs, request, requestAsync, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  qs = require('querystring');

  Promise = require('bluebird');

  request = require('request');

  _ = require('lodash');

  requestAsync = Promise.promisify(request);

  util = require('../util');

  _sendToRobot = function(arg) {
    var message, ref, talkai;
    message = arg.message;
    talkai = this;
    if (!((ref = message.body) != null ? ref.length : void 0)) {
      return;
    }
    if (!(talkai.config.apikey && talkai.config.devid)) {
      return;
    }
    return _getTuringCallback.call(this, message).then(function(body) {
      var attachment, replyMessage;
      if (!((body != null ? body.content : void 0) || (body != null ? body.text : void 0) || (body != null ? body.title : void 0))) {
        return;
      }
      ['content', 'title', 'text'].forEach(function(key) {
        var base;
        if (!body[key]) {
          return;
        }
        return body[key] = typeof (base = body[key]).replace === "function" ? base.replace(/图灵机器人/g, '小艾') : void 0;
      });
      replyMessage = {};
      if (body.content) {
        replyMessage.body = body.content;
      }
      if (body.text || body.title) {
        attachment = {
          category: 'quote',
          data: body
        };
        attachment.data.category = 'talkai';
        replyMessage.attachments = [attachment];
      }
      return replyMessage;
    });
  };

  _getTuringCallback = function(message) {
    var query, talkai;
    talkai = this;
    query = {
      key: talkai.config.apikey,
      info: message.body,
      userid: message._creatorId.toString()
    };
    return requestAsync({
      method: 'POST',
      url: talkai.config.url,
      body: query,
      json: true,
      timeout: 20000
    }).then(function(res) {
      var body, code, data, errMsg, reBr, reComma, reSemi, ref;
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        throw new Error("Bad request " + res.statusCode);
      }
      data = res.body;
      if (ref = data.code.toString(), indexOf.call(Object.keys(talkai.config.errorCodes), ref) >= 0) {
        code = parseInt(req.code);
        errMsg = talkai.config.errorCodes[req.code];
        throw new Error("Bad response from Tuling123.com: " + errMsg);
      }
      body = {};
      switch (data.code) {
        case talkai.config.textCode:
          reBr = new RegExp(/<br>/g);
          reSemi = new RegExp(/;/g);
          if (data.text.split(':').length === 2) {
            reComma = new RegExp(/:/g);
            body.content = data.text.replace(reBr, "\n").replace(reSemi, ";\n").replace(reComma, ":\n");
          } else {
            body.content = data.text.replace(reBr, "\n").replace(reSemi, ";\n");
          }
          break;
        case talkai.config.urlCode:
          body.title = "OK, 已经帮您找到, 快来点开看看吧~";
          body.redirectUrl = data.url;
          break;
        case talkai.config.newsCode:
          body.title = "OK, 已经帮您找到";
          body.text = "<ul>";
          data.list.forEach(function(el) {
            return body.text += "<li><a href=" + el.detailurl + (">" + el.article + "</a></li>");
          });
          body.text += "</ul>";
          break;
        case talkai.config.trainCode:
          body.title = "OK, 已经帮您找到列车信息";
          body.text = "<ul>";
          data.list.forEach(function(el) {
            return body.text += "<li><a href=" + el.detailurl + (">" + el.trainnum + " " + el.start + " - " + el.terminal + " / 时间: " + el.starttime + " - " + el.endtime + "</a></li>");
          });
          body.text += "</ul>";
          break;
        case talkai.config.flightCode:
          body.title = "OK, 已经帮您找到航班信息";
          body.text = "<ul>";
          data.list.forEach(function(el) {
            return body.text += "<li>" + el.flight + " / 时间: " + el.starttime + " - " + el.endtime + "</li>";
          });
          body.text += "</ul>";
          break;
        case talkai.config.othersCode:
          body.title = data.text;
          body.text = "<ul>";
          data.list.forEach(function(el) {
            return body.text += "<li><a href=" + el.detailurl + (">" + el.name + "</a></li>");
          });
          body.text += "</ul>";
      }
      return body;
    });
  };

  module.exports = function() {
    this.title = '小艾';
    this.isHidden = true;
    this.iconUrl = util["static"]('images/icons/talkai@2x.png');
    this.config = _.assign({
      url: "http://www.tuling123.com/openapi/api",
      errorCodes: {
        40001: "key的长度错误",
        40002: "请求内容为空",
        40003: "key错误或帐号未激活",
        40004: "当天请求次数已用完",
        40005: "暂不支持该功能",
        40006: "服务器升级中",
        40007: "服务器数据格式异常"
      },
      textCode: 100000,
      urlCode: 200000,
      newsCode: 302000,
      trainCode: 305000,
      flightCode: 306000,
      othersCode: 308000
    }, util.config.talkai);
    return this.registerEvent('message.create', _sendToRobot);
  };

}).call(this);
