// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, _receiveWebhook, marked, util;

  Promise = require('bluebird');

  marked = require('marked');

  util = require('../util');


  /**
   * Define handler when receive incoming webhook from oschina
   * @param  {Object}   req      Express request object
   * @return {Promise}
   */

  _receiveWebhook = function(arg) {
    var attachment, author, authorName, body, commitArr, e, error, message, payload, payloadStr, projectName, projectUrl, ref, ref1, ref2, ref3, ref4, ref5, ref6, text;
    body = arg.body;
    payloadStr = (body != null ? body.hook : void 0) || null;
    if (!payloadStr) {
      return;
    }
    try {
      payload = JSON.parse(payloadStr).push_data;
    } catch (error) {
      e = error;
      return;
    }
    message = {};
    attachment = {
      category: 'quote',
      data: {}
    };
    projectName = ((ref = payload.repository) != null ? ref.name : void 0) ? "[" + payload.repository.name + "] " : '';
    projectUrl = (ref1 = payload.repository) != null ? ref1.homepage : void 0;
    author = (ref2 = payload.commits[0]) != null ? (ref3 = ref2.author) != null ? ref3.name : void 0 : void 0;
    authorName = author ? author + " " : '';
    if (((ref4 = payload.before) != null ? ref4.slice(0, 6) : void 0) === '000000') {
      attachment.data.title = projectName + "新建了分支 " + payload.ref;
    } else if (((ref5 = payload.after) != null ? ref5.slice(0, 6) : void 0) === '000000') {
      attachment.data.title = projectName + "删除了分支 " + payload.ref;
    } else {
      attachment.data.title = projectName + "提交了新的代码";
      if ((ref6 = payload.commits) != null ? ref6.length : void 0) {
        commitArr = payload.commits.map(function(commit) {
          var commitUrl;
          commitUrl = commit.url;
          return "<a href=\"" + commitUrl + "\" target=\"_blank\"><code>" + commit.id.slice(0, 6) + ":</code></a> " + commit.message + "<br>";
        });
        text = commitArr.join('');
        attachment.data.text = text;
      }
    }
    attachment.data.redirectUrl = projectUrl;
    attachment.data.category = 'oschina';
    message.attachments = [attachment];
    return message;
  };

  module.exports = function() {
    this.title = 'oschina';
    this.template = 'webhook';
    this.summary = util.i18n({
      zh: '中国最大的开源技术社区',
      en: "China's largest open source community"
    });
    this.description = util.i18n({
      zh: '开源中国 www.oschina.net 是目前中国最大的开源技术社区。',
      en: 'www.oschina.net is the largest open source community in china now.'
    });
    this.iconUrl = util["static"]('images/icons/oschina@2x.png');
    this._fields.push({
      key: 'webhookUrl',
      type: 'text',
      readOnly: true,
      description: util.i18n({
        zh: '复制 web hook 地址到你的 oschina 当中使用。',
        en: 'Copy this web hook to your oschina server to use it. '
      })
    });
    return this.registerEvent('service.webhook', _receiveWebhook);
  };

}).call(this);
