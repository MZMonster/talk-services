// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, _, _receiveWebhook, util;

  _ = require('lodash');

  Promise = require('bluebird');

  util = require('../util');


  /**
   * Define handler when receive incoming webhook from new relic
   * @param  {Object}   req      Express request object
   * @param  {Object}   res      Express response object
   * @param  {Function} callback
   * @return {Promise}
   */

  _receiveWebhook = function(arg) {
    var body, integration, message, payload, text, title;
    integration = arg.integration, body = arg.body;
    payload = body;
    if (!payload) {
      return;
    }
    title = [];
    title.push(payload.event_type, ': ');
    if (payload.condition_name !== '') {
      title.push(payload.condition_name);
    }
    text = [];
    if (payload.owner !== '') {
      text.push('Owner: ', payload.owner, '\n');
    }
    if (payload.details !== '') {
      text.push('Incident: ', payload.details);
    }
    message = {
      attachments: [
        {
          category: 'quote',
          data: {
            redirectUrl: payload.incident_url,
            title: title.join(''),
            text: text.join('')
          }
        }
      ]
    };
    return message;
  };

  module.exports = function() {
    this.title = 'New Relic';
    this.template = 'webhook';
    this.summary = util.i18n({
      zh: 'New Relic 是应用分析和监控平台。',
      en: 'New Relic is an APM platform.'
    });
    this.description = util.i18n({
      zh: 'New Relic 是应用分析和监控平台。接入后可以收到应用和服务错误报警的实时通知。',
      en: 'New Relic is an APM platform. High-performing apps. Delightful customer experiences. Better business results. Discover the power of Software Analytics.'
    });
    this.iconUrl = util["static"]('images/icons/newrelic@2x.png');
    this._fields.push({
      key: 'webhookUrl',
      type: 'text',
      readonly: true,
      description: util.i18n({
        zh: '复制 web hook 地址到你的 New Relic 中使用。',
        en: 'Copy this web hook to your New Relic account to use it.'
      })
    });
    return this.registerEvent('service.webhook', _receiveWebhook);
  };

}).call(this);
