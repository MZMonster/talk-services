// Generated by CoffeeScript 1.10.0
(function() {
  var Err, FeedParser, Promise, _, _checkRSS, charset, he, iconv, jschardet, request, stream, util;

  _ = require('lodash');

  request = require('request');

  Promise = require('bluebird');

  charset = require('charset');

  iconv = require('iconv-lite');

  jschardet = require('jschardet');

  FeedParser = require('feedparser');

  Err = require('err1st');

  stream = require('stream');

  he = require('he');

  util = require('../util');

  _checkRSS = function(req, res) {
    var url;
    url = req.get().url;
    url = url.trim();
    return new Promise(function(resolve, reject) {
      return request({
        url: url,
        method: 'GET',
        headers: {
          'User-Agent': util.getUserAgent()
        },
        encoding: null
      }, function(err, res, body) {
        var encoding, ref, ref1;
        if (!((res != null ? res.statusCode : void 0) >= 200 && (res != null ? res.statusCode : void 0) < 300)) {
          return reject(new Error('Invalid feed'));
        }
        if (err) {
          return reject(err);
        }
        encoding = charset(res.headers, body);
        encoding = encoding || ((ref = jschardet.detect(body)) != null ? (ref1 = ref.encoding) != null ? ref1.toLowerCase() : void 0 : void 0) || 'utf-8';
        body = iconv.decode(body, encoding);
        if (!body) {
          return reject(new Error('Invalid feed'));
        }
        return resolve(body);
      });
    }).then(function(body) {
      return new Promise(function(resolve, reject) {
        var feedParser, readableStream;
        feedParser = new FeedParser();
        readableStream = new stream.Readable();
        readableStream._read = function() {};
        feedParser.on('error', reject).on('meta', function(meta) {
          return resolve(meta);
        });
        readableStream.pipe(feedParser);
        readableStream.push(body);
        return readableStream.push(null);
      });
    }).then(function(meta) {
      var data;
      data = {};
      ['title', 'description'].forEach(function(key) {
        if (meta[key]) {
          return data[key] = he.decode(meta[key]);
        }
      });
      return data;
    })["catch"](function(err) {
      throw new Err("INVALID_RSS_URL", url);
    });
  };

  module.exports = function() {
    var events, service;
    service = this;
    this.title = 'RSS';
    this.summary = util.i18n({
      zh: '添加订阅地址，帮助你获取网站内容的最新更新。',
      en: 'RSS automatically syncs the latest site contents.'
    });
    this.description = util.i18n({
      zh: '你可以为某一个话题添加来自其他网站的 RSS 订阅，这能够帮助你即时获取网站的最新内容。你可以在简聊上阅读来自 RSS 订阅的文章，甚至无需离开页面。',
      en: 'RSS automatically syncs the latest site contents. This integration allows you read RSS feed without leaving Talk.'
    });
    this.iconUrl = util["static"]('images/icons/rss@2x.png');
    this._fields.push({
      key: 'url',
      onChange: 'checkRSS'
    });
    this.serviceUrl = util.config.rss.serviceUrl;
    this.registerApi('checkRSS', _checkRSS);
    events = ['integration.create', 'integration.remove', 'integration.update'];
    return events.forEach(function(event) {
      return service.registerEvent(event, function(req) {
        return service.httpPost(service.serviceUrl, {
          event: event,
          data: req.integration
        });
      });
    });
  };

}).call(this);
