// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, _receiveWebhook, marked, util;

  Promise = require('bluebird');

  marked = require('marked');

  util = require('../util');


  /**
   * Define handler when receive incoming webhook from gitlab
   * @param  {Object}   req      Express request object
   * @param  {Object}   res      Express response object
   * @param  {Function} callback
   * @return {Promise}
   */

  _receiveWebhook = function(arg) {
    var attachment, body, commitArr, headers, message, ref, text;
    body = arg.body, headers = arg.headers;
    if (!(headers && headers['x-gitcafe-event'])) {
      throw new Error("Unknown GitCafe event type");
    }
    message = {};
    attachment = {
      category: 'quote',
      data: {}
    };
    switch (headers['x-gitcafe-event']) {
      case 'commit_comment':
        attachment.data.title = body.comment.sender.username + " 评论了提交 " + body.commit.message_subject;
        attachment.data.text = "" + (marked(body.comment.content));
        attachment.data.redirectUrl = body.project.html_url + "/commit/" + body.commit.sha + "#comment-" + body.comment.id;
        break;
      case 'pull_request':
        attachment.data.title = body.sender.username + " 向 " + body.pull_request.head_project.name + " 项目发起了 Pull Request 请求";
        attachment.data.text = (marked(body.pull_request.subject || '')) + " (" + (marked(body.pull_request.content || '')) + ")";
        attachment.data.redirectUrl = body.pull_request.head_project.html_url + "/pull/" + body.pull_request.number;
        break;
      case 'pull_request_comment':
        attachment.data.title = body.comment.sender.username + " 评论了 " + body.pull_request.head_project.name + " 项目的 Pull Request 请求";
        attachment.data.text = "" + (marked(body.comment.content || ''));
        attachment.data.redirectUrl = body.project.html_url + "/pull/" + body.pull_request.number + "#comment-" + body.comment.id;
        break;
      case 'push':
        attachment.data.title = body.sender.username + " 向 " + body.project.name + " 项目提交了代码";
        if ((ref = body.commits) != null ? ref.length : void 0) {
          commitArr = body.commits.map(function(commit) {
            var commitUrl;
            commitUrl = body.project.html_url + "/commit/" + commit.sha;
            return "<a href=\"" + commitUrl + "\" target=\"_blank\"><code>" + commit.sha.slice(0, 6) + ":</code></a> " + commit.message_subject + "<br>";
          });
          text = commitArr.join('');
        }
        attachment.data.text = text;
        attachment.data.redirectUrl = body.project.html_url + "/commits/" + body.project.default_branch;
        break;
      case 'ticket':
        attachment.data.title = body.sender.username + " 在 " + body.project.name + " 项目创建了工单";
        attachment.data.text = (marked(body.ticket.subject || '')) + " (" + (marked(body.ticket.content || '')) + ")";
        attachment.data.redirectUrl = body.ticket.html_url;
        break;
      case 'ticket_comment':
        attachment.data.title = body.comment.sender.username + " 评论了工单 " + body.ticket.subject;
        attachment.data.text = "" + (marked(body.comment.content));
        attachment.data.redirectUrl = body.ticket.html_url + "#comment-" + body.comment.id;
        break;
      default:
        return false;
    }
    message.attachments = [attachment];
    return message;
  };

  module.exports = function() {
    this.title = 'GitCafe';
    this.template = 'webhook';
    this.summary = util.i18n({
      zh: 'GitCafe 是一个基于 git 的在线托管软件项目的服务平台。',
      en: 'GitCafe is a source code hosting service based on version control system Git.'
    });
    this.description = util.i18n({
      zh: 'GitCafe 是一个基于 git 的在线托管软件项目的服务平台。',
      en: 'GitCafe is a source code hosting service based on version control system Git.'
    });
    this.iconUrl = util["static"]('images/icons/gitcafe@2x.png');
    this._fields.push({
      key: 'webhookUrl',
      type: 'text',
      readOnly: true,
      description: util.i18n({
        zh: '复制 web hook 地址到你的 GitCafe 仓库当中使用。你也可以在管理界面当中找到这个 web hook 地址。',
        en: 'Copy this web hook to your GitCafe repo to use it. You may also find this url in the manager tab.'
      })
    });
    return this.registerEvent('service.webhook', _receiveWebhook);
  };

}).call(this);
