// Generated by CoffeeScript 1.10.0
(function() {
  var _receiveWebhook, marked, moment, util;

  moment = require('moment-timezone');

  marked = require('marked');

  util = require('../util');

  _receiveWebhook = function(arg) {
    var attachment, authorName, body, commitArr, event, headers, integration, message, payload, prioritys, projectName, projectUrl, ref, ref1, ref2, ref3, ref4, ref5, ref6, targetTypes, text;
    integration = arg.integration, body = arg.body, headers = arg.headers;
    payload = body;
    event = headers["x-coding-event"];
    if (integration.token && integration.token !== payload.token) {
      throw new Error("Invalid token of coding");
    }
    message = {};
    attachment = {
      category: 'quote',
      data: {}
    };
    projectName = ((ref = payload.repository) != null ? ref.name : void 0) ? "[" + payload.repository.name + "] " : '';
    projectUrl = (ref1 = payload.repository) != null ? ref1.web_url : void 0;
    authorName = ((ref2 = payload.author) != null ? ref2.name : void 0) ? payload.author.name + " " : '';
    switch (event) {
      case 'push':
        if (((ref3 = payload.before) != null ? ref3.slice(0, 6) : void 0) === '000000') {
          attachment.data.title = projectName + "新建了分支 " + payload.ref;
        } else if (((ref4 = payload.after) != null ? ref4.slice(0, 6) : void 0) === '000000') {
          attachment.data.title = projectName + "删除了分支 " + payload.ref;
        } else {
          attachment.data.title = projectName + "提交了新的代码";
          if ((ref5 = payload.commits) != null ? ref5.length : void 0) {
            commitArr = payload.commits.map(function(commit) {
              var commitUrl;
              commitUrl = projectUrl + "/git/commit/" + commit.sha;
              return "<a href=\"" + commitUrl + "\" target=\"_blank\"><code>" + commit.sha.slice(0, 6) + ":</code></a> " + commit.short_message + "<br>";
            });
            text = commitArr.join('');
            attachment.data.text = text;
          }
        }
        attachment.data.redirectUrl = projectUrl;
        break;
      case 'member':
        switch (payload.action) {
          case 'create':
            attachment.data.title = "" + projectName + authorName + "添加了新的成员 " + payload.target_user.name;
            attachment.data.redirectUrl = projectUrl + "/members/" + payload.target_user.global_key;
            break;
          default:
            return false;
        }
        break;
      case 'task':
        attachment.data.redirectUrl = projectUrl + "/tasks";
        switch (payload.action) {
          case 'create':
            attachment.data.title = "" + projectName + authorName + "添加了新的任务 " + payload.task.content;
            break;
          case 'update_deadline':
            attachment.data.title = "" + projectName + authorName + "更新了任务 " + payload.task.content + " 的截止日期 " + (moment(payload.task.deadline).tz('Asia/Shanghai').format('YYYY-MM-DD'));
            break;
          case 'update_priority':
            prioritys = ['有空再看', '正常处理', '优先处理', '十万火急'];
            attachment.data.title = "" + projectName + authorName + "更新了任务 " + payload.task.content + " 的优先级 " + (prioritys[payload.task.priority] || '');
            break;
          case 'reassign':
            attachment.data.title = "" + projectName + authorName + "将任务 " + payload.task.content + " 指派给 " + payload.task.owner.name;
            break;
          case 'finish':
            attachment.data.title = "" + projectName + authorName + "完成了任务 " + payload.task.content;
            break;
          case 'restore':
            attachment.data.title = "" + projectName + authorName + "重做了任务 " + payload.task.content;
            break;
          default:
            return false;
        }
        break;
      case 'topic':
        attachment.data.redirectUrl = payload.topic.web_url;
        switch (payload.action) {
          case 'create':
            attachment.data.title = "" + projectName + payload.topic.author.name + " 发起了新的话题 " + payload.topic.title;
            break;
          case 'update':
            attachment.data.title = "" + projectName + payload.topic.author.name + " 更新了话题 " + payload.topic.title;
            break;
          default:
            return false;
        }
        break;
      case 'document':
        attachment.data.redirectUrl = payload.document.web_url;
        targetTypes = {
          dir: '文件夹',
          file: '文件'
        };
        switch (payload.action) {
          case 'create':
            attachment.data.title = "" + projectName + authorName + "创建了新的" + (targetTypes[payload.type] || '文件') + " " + payload.document.name;
            break;
          case 'upload':
            attachment.data.title = "" + projectName + authorName + "上传了新的" + (targetTypes[payload.type] || '文件') + " " + payload.document.name;
            break;
          case 'update':
            attachment.data.title = "" + projectName + authorName + "更新了" + (targetTypes[payload.type] || '文件') + " " + payload.document.name;
            break;
          default:
            return false;
        }
        break;
      case 'watch':
        attachment.data.redirectUrl = projectUrl;
        switch (payload.action) {
          case 'watch':
            attachment.data.title = "" + projectName + authorName + "关注了项目";
            break;
          default:
            return false;
        }
        break;
      case 'star':
        attachment.data.redirectUrl = projectUrl;
        switch (payload.action) {
          case 'star':
            attachment.data.title = "" + projectName + authorName + "收藏了项目";
            break;
          default:
            return false;
        }
        break;
      case 'merge_request':
      case 'pull_request':
        attachment.data.redirectUrl = payload[event].web_url;
        switch ((ref6 = payload[event]) != null ? ref6.action : void 0) {
          case 'create':
            attachment.data.title = projectName + "新的 " + event + " 请求 " + payload[event].title;
            if (payload[event].body) {
              attachment.data.text = marked(payload[event].body);
            }
            break;
          case 'refuse':
            attachment.data.title = projectName + "拒绝了 " + event + " 请求 " + payload[event].title;
            if (payload[event].body) {
              attachment.data.text = marked(payload[event].body);
            }
            break;
          case 'merge':
            attachment.data.title = projectName + "合并了 " + event + " 请求 " + payload[event].title;
            if (payload[event].body) {
              attachment.data.text = marked(payload[event].body);
            }
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    message.attachments = [attachment];
    return message;
  };

  module.exports = function() {
    this.title = 'Coding.net';
    this.template = 'webhook';
    this.summary = util.i18n({
      en: 'Coding.net is a developer-oriented cloud development platform, provides a running space, quality control, providing code hosting, project management, and other functions.',
      zh: '面向开发者的云端开发平台。'
    });
    this.description = util.i18n({
      en: "Coding.net is a developer-oriented cloud development platform, provides a running space, quality control, providing code hosting, project management, and other functions. When you Git version of the repository on the Coding.net when there is a new Push, you'll catch up on Talk received this Push on and information about the repository.",
      zh: 'Coding.net 是面向开发者的云端开发平台，提供了提供代码托管、运行空间、质量控制、项目管理等功能。当您在 Coding.net 上的 Git 版本仓库有新的 Push 的时候，你会在简聊上收到本次 Push 以及本仓库的相关信息。'
    });
    this.iconUrl = util["static"]('images/icons/coding@2x.png');
    this._fields.push({
      key: 'webhookUrl',
      type: 'text',
      readOnly: true,
      description: util.i18n({
        zh: '进入你的 Coding.net 项目设置，选择 WebHook 设置，添加 WebHook 地址到项目中即可接收推送通知。',
        en: 'Open your project settings on Coding.net, select the WebHook settings, add a WebHook address to your project to receive push notifications.'
      })
    });
    return this.registerEvent('service.webhook', _receiveWebhook);
  };

}).call(this);
