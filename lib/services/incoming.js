// Generated by CoffeeScript 1.10.0
(function() {
  var _, _receiveWebhook, util;

  _ = require('lodash');

  util = require('../util');

  _receiveWebhook = function(arg) {
    var authorName, body, content, creator, displayType, imageUrl, mention, message, payload, query, redirectUrl, text, title;
    query = arg.query, body = arg.body;
    payload = _.assign({}, query || {}, body || {});
    content = payload.content, authorName = payload.authorName, displayType = payload.displayType, creator = payload.creator, title = payload.title, text = payload.text, redirectUrl = payload.redirectUrl, imageUrl = payload.imageUrl, mention = payload.mention;
    if (!((title != null ? title.length : void 0) || (text != null ? text.length : void 0) || (content != null ? content.length : void 0))) {
      throw new Error("Title and text can not be empty");
    }
    message = {
      body: content || payload.body || '',
      authorName: authorName,
      creator: creator,
      team: payload.team,
      displayType: displayType
    };
    if (mention && mention._id && mention.name) {
      message.body = "<$at|" + mention._id + "|@" + mention.name + "$> " + (message.body || '');
      message.mentions = [mention._id];
    }
    switch (false) {
      case !payload._roomId:
        message.room = payload._roomId;
        break;
      case !payload._toId:
        message.to = payload._toId;
        break;
      case !payload._storyId:
        message.story = payload._storyId;
        break;
      default:
        throw new Err('PARAMS_MISSING', '_toId _roomId _storyId');
    }
    if (title || text || redirectUrl || imageUrl) {
      message.attachments = [
        {
          category: 'quote',
          color: payload.color,
          data: {
            title: title,
            text: text,
            redirectUrl: redirectUrl,
            imageUrl: imageUrl
          }
        }
      ];
    }
    return message;
  };

  module.exports = function() {
    this.title = 'Incoming Webhook';
    this.template = 'webhook';
    this.isCustomized = true;
    this.summary = util.i18n({
      zh: 'Incoming Webhook 是使用普通的 HTTP 请求与 JSON 数据从外部向简聊发送消息的简单方案。',
      en: 'Incoming Webhook makes use of normal HTTP requests with a JSON payload.'
    });
    this.description = util.i18n({
      zh: 'Incoming Webhook 是使用普通的 HTTP 请求与 JSON 数据从外部向简聊发送消息的简单方案。你可以将 Webook 地址复制到第三方服务，通过简单配置来自定义收取相应的推送消息。',
      en: 'Incoming Webhook makes use of normal HTTP requests with a JSON payload. Copy your webhook address to third-party services to configure push notifications.'
    });
    this.iconUrl = util["static"]('images/icons/incoming@2x.png');
    this._fields.push({
      key: 'webhookUrl',
      type: 'text',
      readOnly: true,
      description: util.i18n({
        zh: '复制 web hook 地址到你的应用中来启用 Incoming Webhook。',
        en: 'To start using incoming webhook, copy this url to your application'
      })
    });
    return this.registerEvent('service.webhook', _receiveWebhook);
  };

}).call(this);
