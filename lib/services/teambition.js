// Generated by CoffeeScript 1.10.0
(function() {
  var Err, Promise, _, _checkSign, _createProjectHook, _createWebhook, _getEvents, _getGroups, _getProjects, _getTbToken, _preValidate, _receiveWebhook, _removeProjectHook, _removeWebhook, _supportEvents, _updateProjectHook, _updateWebhook, crypto, marked, moment, request, requestAsync, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  Promise = require('bluebird');

  request = require('request');

  moment = require('moment-timezone');

  marked = require('marked');

  crypto = require('crypto');

  Err = require('err1st');

  requestAsync = Promise.promisify(request);

  util = require('../util');

  _supportEvents = ["project.rename", "project.archive", "project.unarchive", "project.member.create", "project.member.remove", "tasklist.create", "tasklist.remove", "tasklist.rename", "task.create", "task.update", "task.remove", "task.update.executor", "task.update.dueDate", "task.update.priority", "task.update.involveMembers", "task.rename", "task.move", "task.done", "subtask.create", "subtask.update.executor", "subtask.update.content", "subtask.done", "tag.create", "tag.remove", "post.create", "post.update", "post.update.involveMembers", "file.create", "file.remove", "file.move", "file.rename", "file.update.version", "file.update.involveMembers", "event.create", "event.remove", "event.update", "event.update.involveMembers", "stage.create", "stage.rename", "entry.create", "entry.update", "entry.update.involveMembers"];

  _getTbToken = function(accountToken) {
    var $token;
    return $token = util.getAccountUserAsync(accountToken).then(function(user) {
      var accessToken, ref;
      accessToken = null;
      if (user != null) {
        if ((ref = user.unions) != null) {
          ref.some(function(union) {
            if ((union != null ? union.refer : void 0) === 'teambition' && union.accessToken) {
              accessToken = union.accessToken;
              return true;
            }
          });
        }
      }
      if (!accessToken) {
        throw new Err('NO_PERMISSION', '你没有绑定 Teambition 账号');
      }
      return accessToken;
    });
  };


  /**
   * Validate the integration
   * @param  {Model} integration - Integration model
   * @return {Null}
   */

  _preValidate = function(integration) {
    var invalidEvents, ref;
    if (!((ref = integration.project) != null ? ref._id : void 0)) {
      throw new Err('PARAMS_MISSING', 'Missing project in teambition integration!');
    }
    if (!integration.events) {
      throw new Err('PARAMS_MISSING', 'Missing events in teambition integration');
    }
    invalidEvents = integration.events.filter(function(event) {
      return indexOf.call(_supportEvents, event) < 0;
    });
    if (invalidEvents.length) {
      throw new Err('PARAMS_INVALID', "Invalid events " + invalidEvents);
    }
  };

  _checkSign = function(query) {
    var nonce, sign, timestamp, values;
    if (query == null) {
      query = {};
    }
    sign = query.sign, timestamp = query.timestamp, nonce = query.nonce;
    if (!(sign && timestamp && nonce)) {
      throw new Err('SIGNATURE_FAILED');
    }
    if (!((Date.now() - Number(timestamp)) < 60000)) {
      throw new Err('TOKEN_EXPIRED');
    }
    values = [timestamp, nonce, util.config.teambition.clientSecret];
    if (sign !== crypto.createHash('sha1').update(values.sort().join('')).digest('hex')) {
      throw new Err('SIGNATURE_FAILED');
    }
  };

  _receiveWebhook = function(arg) {
    var actions, attachment, base, body, data, event, fileNames, incoming, integration, memberNames, members, message, method, priorities, query, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, scope;
    integration = arg.integration, body = arg.body, query = arg.query, method = arg.method;
    _checkSign(query);
    if (method === 'HEAD') {
      return;
    }
    event = body.event, data = body.data;
    message = {};
    attachment = {
      category: 'quote',
      data: {}
    };
    scope = event != null ? event.split('.')[0] : void 0;
    if (!scope) {
      throw new Err("PARAMS_INVALID", "Invalid event of teambition integration");
    }
    switch (scope) {
      case 'subtask':
        attachment.data.redirectUrl = (ref = data.subtask.task) != null ? ref.url : void 0;
        break;
      case 'file':
        if (toString.call(data.file) === '[object Array]') {
          attachment.data.redirectUrl = data.file[0].url;
        } else {
          attachment.data.redirectUrl = data.file.url;
        }
        break;
      case 'stage':
        attachment.data.redirectUrl = (ref1 = data.stage.tasklist) != null ? ref1.url : void 0;
        break;
      default:
        attachment.data.redirectUrl = (ref2 = data[scope]) != null ? ref2.url : void 0;
    }
    (base = attachment.data).redirectUrl || (base.redirectUrl = data.project.url);
    switch (event) {
      case 'project.rename':
      case 'project.archive':
      case 'project.unarchive':
        actions = {
          'project.rename': "重命名了",
          'project.archive': "归档了",
          'project.unarchive': "恢复了"
        };
        attachment.data.title = actions[event] + "项目 " + data.project.name;
        break;
      case 'project.member.create':
      case 'project.member.remove':
        members = toString.call(data.member) === '[object Array]' ? data.member : [data.member];
        memberNames = members.map(function(m) {
          return m.name;
        }).join('，');
        actions = {
          'project.member.create': "邀请了",
          'project.member.remove': "移除了"
        };
        attachment.data.title = actions[event] + "成员 " + memberNames;
        break;
      case 'tasklist.create':
      case 'tasklist.remove':
      case 'tasklist.rename':
        actions = {
          "tasklist.create": "创建了",
          "tasklist.remove": "删除了",
          "tasklist.rename": "修改了"
        };
        attachment.data.title = actions[event] + "任务列表 " + ((ref3 = data.tasklist) != null ? ref3.title : void 0);
        break;
      case 'task.create':
      case 'task.remove':
      case 'task.rename':
      case 'task.done':
        actions = {
          'task.create': "创建了",
          "task.remove": "删除了",
          'task.rename': "重命名了",
          'task.done': "完成了"
        };
        attachment.data.title = actions[event] + "任务 " + ((ref4 = data.task) != null ? ref4.content : void 0);
        break;
      case 'task.update.executor':
        if ((ref5 = data.task.executor) != null ? ref5.name : void 0) {
          attachment.data.title = "将任务 " + data.task.content + " 指派给 " + data.task.executor.name;
        } else {
          attachment.data.title = "移除了任务的执行者 " + data.task.content;
        }
        break;
      case 'task.update.priority':
        priorities = {
          'normal': '普通',
          'high': '紧急',
          'urgent': '非常紧急'
        };
        attachment.data.title = "更新了任务 " + data.task.content + " 的优先级 " + priorities[data.task.priority];
        break;
      case 'task.update.dueDate':
        if (data.task.dueDate) {
          attachment.data.title = "更新了任务 " + data.task.content + " 的截止日期 " + (moment(data.task.dueDate).tz('Asia/Shanghai').format('MM月DD日'));
        } else {
          attachment.data.title = "删除了任务的截止日期 " + data.task.content;
        }
        break;
      case 'task.move':
        attachment.data.title = "将任务 " + ((ref6 = data.task) != null ? ref6.content : void 0) + " 移动到 " + ((ref7 = data.tasklist) != null ? ref7.title : void 0) + "列表，" + ((ref8 = data.stage) != null ? ref8.name : void 0) + "阶段";
        break;
      case 'task.update.involveMembers':

        /**
         * @todo Accomplish task.update.involveMembers
         */
        return false;
      case 'subtask.create':
      case 'subtask.update.content':
      case 'subtask.done':
        actions = {
          'subtask.create': '创建了',
          'subtask.update.content': '更新了',
          'subtask.done': '完成了'
        };
        attachment.data.title = actions[event] + "子任务 " + data.subtask.content;
        break;
      case 'subtask.update.executor':
        if ((ref9 = data.subtask.executor) != null ? ref9.name : void 0) {
          attachment.data.title = "将子任务 " + data.subtask.content + " 指派给 " + ((ref10 = data.subtask.executor) != null ? ref10.name : void 0);
        } else {
          attachment.data.title = "移除了子任务的执行者 " + data.subtask.content;
        }
        break;
      case 'tag.create':
      case 'tag.remove':
        actions = {
          'tag.create': '创建了',
          'tag.remove': "删除了"
        };
        attachment.data.title = actions[event] + "标签 " + data.tag.name;
        break;
      case 'post.create':
      case 'post.update':
        actions = {
          'post.create': '发布了',
          'post.update': '更新了'
        };
        attachment.data.title = actions[event] + "分享 " + data.post.title;
        if (data.post.postMode === 'md') {
          attachment.data.text = marked(data.post.content || '');
        } else {
          attachment.data.text = data.post.content;
        }
        break;
      case 'post.update.involveMembers':

        /**
         * @todo Accomplish post.update.involveMembers
         */
        return false;
      case 'file.create':
      case 'file.rename':
      case 'file.remove':
      case 'file.update.version':
        actions = {
          'file.create': '上传了',
          'file.rename': '重命名了',
          'file.remove': '删除了',
          'file.update.version': '更新了'
        };
        if (toString.call(data.file) === '[object Array]') {
          fileNames = data.file.map(function(file) {
            return file.fileName;
          }).join('，');
          attachment.data.imageUrl = data.file[0].thumbnail;
        } else {
          fileNames = data.file.fileName;
          attachment.data.imageUrl = data.file.thumbnail;
        }
        attachment.data.title = actions[event] + "文件 " + fileNames;
        break;
      case 'file.move':
        attachment.data.title = "将文件 " + data.file.fileName + " 移动到 " + ((ref11 = data.file.collection) != null ? ref11.title : void 0);
        break;
      case 'event.create':
      case 'event.update':
        actions = {
          'event.create': '创建了',
          'event.update': '更新了'
        };
        attachment.data.title = [actions[event] + "日程 " + data.event.title + " ", "地点：" + data.event.location + "，", "开始时间：" + (moment(data.event.startDate).tz('Asia/Shanghai').format('MM月DD日HH:mm:ss')) + "，", "结束时间：" + (moment(data.event.endDate).tz('Asia/Shanghai').format('MM月DD日HH:mm:ss'))].join('');
        attachment.data.text = marked(data.event.content || '');
        break;
      case 'event.remove':
        attachment.data.title = "删除了日程 " + data.event.title;
        break;
      case 'stage.create':
      case 'stage.rename':
        actions = {
          'stage.create': '创建了',
          'stage.rename': '重命名了'
        };
        attachment.data.title = actions[event] + "阶段 " + data.stage.name;
        break;
      case 'entry.create':
      case 'entry.update':
        actions = {
          'entry.create': '创建了',
          'entry.update': '更新了'
        };
        incoming = data.entry.type === 1 ? "收入" : "支出";
        attachment.data.title = actions[event] + "账单 " + data.entry.content + "，" + incoming + " " + data.entry.amount + " 元";
        break;
      default:
        return false;
    }
    attachment.data.title = "[" + data.project.name + "] " + data.user.name + " " + attachment.data.title;
    message.attachments = [attachment];
    return message;
  };


  /**
   * Create teambition project hook
   * @param  {String} _projectId - Teambition project id
   * @param  {String} token - Token
   * @param  {Array} events - Events
   * @param  {String} hashId - Hashed id of integration
   * @return {Promise} Response body
   */

  _createProjectHook = function(_projectId, token, events, hashId) {
    return requestAsync({
      method: 'POST',
      headers: {
        "User-Agent": util.getUserAgent(),
        "Authorization": "OAuth2 " + token
      },
      url: util.config.teambition.host + "/api/projects/" + _projectId + "/hooks",
      json: true,
      body: {
        callbackURL: util.config.apiHost + "/services/webhook/" + hashId,
        events: events
      }
    }).then(function(res) {
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        throw new Err("BAD_REQUEST", res.statusCode);
      }
      return res.body;
    });
  };

  _updateProjectHook = function(_projectId, hookId, token, events, hashId) {
    return requestAsync({
      method: 'PUT',
      headers: {
        "User-Agent": util.getUserAgent(),
        "Authorization": "OAuth2 " + token
      },
      url: util.config.teambition.host + "/api/projects/" + _projectId + "/hooks/" + hookId,
      json: true,
      body: {
        callbackURL: util.config.apiHost + "/services/webhook/" + hashId,
        events: events
      }
    }).then(function(res) {
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        throw new Err("BAD_REQUEST", res.statusCode);
      }
      return res.body;
    });
  };

  _removeProjectHook = function(_projectId, hookId, token) {
    return requestAsync({
      method: 'DELETE',
      url: util.config.teambition.host + "/api/projects/" + _projectId + "/hooks/" + hookId,
      headers: {
        "User-Agent": util.getUserAgent(),
        "Authorization": "OAuth2 " + token
      },
      json: true
    }).then(function(res) {
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        throw new Err("BAD_REQUEST", res.statusCode);
      }
      return res.body;
    });
  };

  _createWebhook = function(req) {
    var $token, accountToken, integration;
    integration = req.integration;
    accountToken = req.get().accountToken;
    _preValidate(integration);
    $token = _getTbToken(accountToken);
    return $token.then(function(token) {
      return _createProjectHook(integration.project._id, token, integration.events, integration.hashId);
    }).then(function(body) {
      var data;
      data = integration.data || {};
      data[integration.project._id] = {
        hookId: body._id
      };
      integration.data = data;
      return integration;
    });
  };

  _updateWebhook = function(req) {
    var $createNewProjectHook, $integration, $removeOldProjectHook, $token, _originalProjectId, _projectId, accountToken, events, integration, project, ref, ref1;
    integration = req.integration;
    ref = req.get(), accountToken = ref.accountToken, events = ref.events, project = ref.project;
    if (!(events || project)) {
      return;
    }
    _preValidate(integration);
    $token = _getTbToken(accountToken);
    if (project && !_.isEqual("" + (project != null ? project._id : void 0), "" + ((ref1 = integration.project) != null ? ref1._id : void 0))) {
      _originalProjectId = integration.project._id;
      $removeOldProjectHook = $token.then(function(token) {
        return _removeProjectHook(_originalProjectId, integration.data[_originalProjectId].hookId, token);
      }).then(function(body) {
        delete integration.data[_originalProjectId];
        return integration;
      });
      $createNewProjectHook = $token.then(function(token) {
        return _createProjectHook(project._id, token, events || integration.events, integration.hashId);
      }).then(function(body) {
        var data;
        data = integration.data || {};
        data[project._id] = {
          hookId: body._id
        };
        integration.data = data;
        return integration;
      });
      $integration = Promise.all([$removeOldProjectHook, $createNewProjectHook]).then(function() {
        return integration;
      });
    } else if (events && !_.isEqual(events, integration.events)) {
      _projectId = integration.project._id;
      $integration = $token.then(function(token) {
        return _updateProjectHook(_projectId, integration.data[_projectId].hookId, token, events, integration.hashId);
      }).then(function(body) {
        return integration;
      });
    } else {
      $integration = Promise.resolve(integration);
    }
    return $integration;
  };

  _removeWebhook = function(req) {
    var $token, _projectId, accountToken, integration;
    integration = req.integration;
    accountToken = req.get().accountToken;
    _preValidate(integration);
    _projectId = integration.project._id;
    if (!integration.data) {
      return;
    }
    $token = _getTbToken(accountToken);
    return Promise.resolve(Object.keys(integration.data)).map(function(_projectId) {
      return $token.then(function(token) {
        return _removeProjectHook(integration.project._id, integration.data[_projectId].hookId, token);
      });
    });
  };


  /**
   * Get project list of user
   * @param  {Request} req
   * @param  {Response} res
   * @return {Promise} projects
   */

  _getProjects = function(req, res) {
    var $token, accountToken;
    accountToken = req.get().accountToken;
    $token = _getTbToken(accountToken);
    return $token.then(function(token) {
      return requestAsync({
        method: 'GET',
        headers: {
          "User-Agent": util.getUserAgent(),
          "Authorization": "OAuth2 " + token
        },
        url: util.config.teambition.host + "/api/projects",
        json: true
      }).then(function(res) {
        var projects;
        if (!(res.statusCode >= 200 && res.statusCode < 300)) {
          throw new Err("BAD_REQUEST", res.statusCode);
        }
        projects = res.body;
        return projects.map(function(project) {
          return _.pick(project, '_id', 'name');
        });
      });
    });
  };

  _getEvents = function() {
    return [
      {
        key: 'project.member.create',
        group: 'project',
        label: util.i18n({
          zh: '添加项目成员',
          en: 'Invite members to project'
        })
      }, {
        key: 'project.member.remove',
        group: 'project',
        label: util.i18n({
          zh: '移除项目成员',
          en: 'Remove project members'
        })
      }, {
        key: 'project.rename',
        group: 'project',
        label: util.i18n({
          zh: '修改项目名称',
          en: 'Rename project'
        })
      }, {
        key: 'task.create',
        group: 'task',
        label: util.i18n({
          zh: '创建任务',
          en: 'Create task'
        })
      }, {
        key: 'task.update.executor',
        group: 'task',
        label: util.i18n({
          zh: '分配执行者',
          en: 'Update executor of task'
        })
      }, {
        key: 'task.update.dueDate',
        group: 'task',
        label: util.i18n({
          zh: '设置截止日期',
          en: 'Update due date of task'
        })
      }, {
        key: 'task.update.priority',
        group: 'task',
        label: util.i18n({
          zh: '设置优先级',
          en: 'Update priority of task'
        })
      }, {
        key: 'task.rename',
        group: 'task',
        label: util.i18n({
          zh: '重命名任务',
          en: 'Update name of task'
        })
      }, {
        key: 'task.move',
        group: 'task',
        label: util.i18n({
          zh: '移动任务',
          en: 'Update stage of task'
        })
      }, {
        key: 'task.done',
        group: 'task',
        label: util.i18n({
          zh: '完成任务',
          en: 'Finish the task'
        })
      }, {
        key: 'tasklist.create',
        group: 'task',
        label: util.i18n({
          zh: '创建任务分组',
          en: 'Create tasklist'
        })
      }, {
        key: 'tasklist.rename',
        group: 'task',
        label: util.i18n({
          zh: '重命名任务分组',
          en: 'Rename tasklist'
        })
      }, {
        key: 'stage.create',
        group: 'task',
        label: util.i18n({
          zh: '添加新阶段',
          en: 'Create stage'
        })
      }, {
        key: 'stage.rename',
        group: 'task',
        label: util.i18n({
          zh: '重命名任务阶段',
          en: 'Rename stage'
        })
      }, {
        key: 'subtask.create',
        group: 'task',
        label: util.i18n({
          zh: '添加子任务',
          en: 'Create subtask'
        })
      }, {
        key: 'subtask.update.executor',
        group: 'task',
        label: util.i18n({
          zh: '子任务分配了执行者',
          en: 'Update executor of subtask'
        })
      }, {
        key: 'subtask.update.content',
        group: 'task',
        label: util.i18n({
          zh: '编辑子任务',
          en: 'Update content of subtask'
        })
      }, {
        key: 'subtask.done',
        group: 'task',
        label: util.i18n({
          zh: '完成子任务',
          en: 'Finish the subtask'
        })
      }, {
        key: 'post.create',
        group: 'post',
        label: util.i18n({
          zh: '添加分享',
          en: 'Create a post'
        })
      }, {
        key: 'post.update',
        group: 'post',
        label: util.i18n({
          zh: '修改分享',
          en: 'Update a post'
        })
      }, {
        key: 'file.create',
        group: 'file',
        label: util.i18n({
          zh: '上传文件',
          en: 'Upload a file'
        })
      }, {
        key: 'file.update.version',
        group: 'file',
        label: util.i18n({
          zh: '更新文件',
          en: 'Update version of file'
        })
      }, {
        key: 'file.move',
        group: 'file',
        label: util.i18n({
          zh: '移动文件',
          en: 'Move file to another directory'
        })
      }, {
        key: 'event.create',
        group: 'event',
        label: util.i18n({
          zh: '创建日程',
          en: 'Create event'
        })
      }, {
        key: 'event.update',
        group: 'event',
        label: util.i18n({
          zh: '更新日程',
          en: 'Update content of event'
        })
      }, {
        key: 'entry.create',
        group: 'entry',
        label: util.i18n({
          zh: '记录账目',
          en: 'Create a entry'
        })
      }, {
        key: 'entry.update',
        group: 'entry',
        label: util.i18n({
          zh: '修改记录',
          en: 'Update a entry'
        })
      }
    ];
  };

  _getGroups = function() {
    return [
      {
        key: 'project',
        label: util.i18n({
          zh: '项目',
          en: 'Project'
        })
      }, {
        key: 'task',
        label: util.i18n({
          zh: '任务板',
          en: 'Task'
        })
      }, {
        key: 'post',
        label: util.i18n({
          zh: '分享墙',
          en: 'Post'
        })
      }, {
        key: 'file',
        label: util.i18n({
          zh: '文件库',
          en: 'File'
        })
      }, {
        key: 'event',
        label: util.i18n({
          zh: '日程表',
          en: 'Event'
        })
      }, {
        key: 'entry',
        label: util.i18n({
          zh: '记账',
          en: 'Entry'
        })
      }
    ];
  };

  module.exports = function() {
    this.title = 'Teambition';
    this.summary = util.i18n({
      zh: '配置 Teambition 聚合，实时接收来自 Teambition 的任务，日程，分享等消息',
      en: 'This integration helps you receive real-time tasks, schedules and posts from Teambition'
    });
    this.description = util.i18n({
      zh: '配置 Teambition 聚合，实时接收来自 Teambition 的任务，日程，分享等消息',
      en: 'This integration helps you receive real-time tasks, schedules and posts from Teambition'
    });
    this.iconUrl = util["static"]('images/icons/teambition@2x.png');
    this._fields.push({
      key: 'project',
      onLoad: {
        get: this.getApiUrl('getProjects')
      }
    });
    this._fields.push({
      key: 'events',
      items: _getEvents.apply(this),
      groups: _getGroups.apply(this)
    });
    this.registerEvent('service.webhook', _receiveWebhook);
    this.registerEvent('before.integration.create', _createWebhook);
    this.registerEvent('before.integration.update', _updateWebhook);
    this.registerEvent('before.integration.remove', _removeWebhook);
    return this.registerApi('getProjects', _getProjects);
  };

}).call(this);
