// Generated by CoffeeScript 1.10.0
(function() {
  var Err, Promise, ServiceLoader, loader;

  Promise = require('bluebird');

  Err = require('err1st');

  ServiceLoader = (function() {
    function ServiceLoader() {}

    ServiceLoader.prototype.config = {};

    ServiceLoader.prototype.$_services = {};


    /**
     * Load a service
     * @param  {String} name - Service name
     * @param  {Function} regFn - Register function, if this function is not exists, auto load the service from module
     * @return {Promise} Service instance
     */

    ServiceLoader.prototype.load = function(name, regFn) {
      var Service;
      if (!this.$_services[name]) {
        Service = require('./service');
        this.$_services[name] = Promise.resolve(new Service(name)).then(function(service) {
          return Promise.resolve(service.register()).then(function() {
            var err, error, initializer;
            try {
              initializer = require("./services/" + name);
            } catch (error) {
              err = error;
              if (toString.call(regFn) !== '[object Function]') {
                throw new Err("INVALID_SERVICE", name);
              }
              return;
            }
            return initializer.call(service, service);
          }).then(function() {
            return service;
          });
        });
      }
      if (toString.call(regFn) === '[object Function]') {
        this.$_services[name] = this.$_services[name].then(function(service) {
          return Promise.resolve(regFn.call(service, service)).then(function() {
            return service;
          });
        });
      }
      return this.$_services[name];
    };

    return ServiceLoader;

  })();

  loader = new ServiceLoader;

  module.exports = loader;

}).call(this);
